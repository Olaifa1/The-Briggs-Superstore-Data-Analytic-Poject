create database Superstore;

Use Superstore;


Select *
from Orders;

Select *
from People;

Select *
from Returns;

Select *
from INFORMATION_SCHEMA.COLUMNS;


/**
Using table Orders, the Briggs company wants to ship some of their products 
to customers in selected cities but they want to know the average days 
it will take to deliver those items to Dallas, Los Angeles, Seattle and Madison. 
Write an SSMS query to show  the average delivery days to those cities. 
Only show the City and Average delivery days column in your output.
**/
SELECT City, AVG(DATEDIFF(day, Order_Date, Ship_Date)) AS AverageDeliveryDays
FROM Orders
WHERE City IN ('Dallas', 'Los Angeles', 'Seattle', 'Madison')
GROUP BY City;

/**
In this query:

We select the "City" column and calculate the average delivery days using the DATEDIFF function, 
which calculates the number of days between the "Order_Date" and "Ship_Date" columns.

We use the WHERE clause to filter the results to include only rows 
where the "City" is one of the specified cities: 'Dallas', 'Los Angeles', 'Seattle', or 'Madison'.

We use GROUP BY to group the results by the "City," so you get the average delivery days for each of the specified cities.

The output of this query will show two columns: "City" and "AverageDeliveryDays," 
displaying the average delivery days for each of the selected cities.
**/


/**
Question 8: It's getting to the end of the year and The Briggs company 
wants to reward the customer who made the highest sales ever. Using the Sample superstore, 
write a query to help the company identify this customer and category of business driving the sales. 
Let your output show the customer Name, the category and the total sales. 
Round  the total sales to the nearest whole number.
**/
SELECT TOP 1
    Customer_Name AS CustomerName,
    Category AS Category,
    ROUND(SUM(Sales), 0) AS TotalSales
FROM Orders 
GROUP BY Customer_Name, Category
ORDER BY TotalSales DESC;



/**
In this query:

We're selecting the top 1 row, which will give us the customer with the highest sales.
We're selecting the Customer_Name and Category from the Orders table.
We're using the SUM function to calculate the total sales for each customer in each category.
We're rounding the total sales to the nearest whole number using the ROUND function with a precision of 0.
We're grouping the results by Customer_Name and Category so that we can calculate the total sales for each unique combination of customer and category.
We're ordering the results in descending order of total sales, so the customer with the highest sales will appear at the top of the result set.
This query will give you the customer's name, the category, and the total sales, with the highest sales appearing at the top of the result set.
**/

/**
Question 7:
The Briggs company has 3 categories of business generating revenue for the company. 
They want to know which of them is driving the business. 
Write a query to show the total sales and percentage contribution. 
Show category, Total Sales and Percentage contribution columns in your output.
**/
SELECT
    Category,
    ROUND(SUM(Sales), 0) AS TotalSales,
    ROUND((SUM(Sales) / (SELECT SUM(Sales) FROM Orders)) * 100, 1) AS PercentageContribution
FROM
    Orders
GROUP BY
    Category
ORDER BY 
	TotalSales DESC;

	





/**	In this query:

We select the "Category" from the "Orders" table to group the data by different categories.
We use the SUM function to calculate the total sales for each category.
To calculate the percentage contribution, we divide the total sales for each category by the overall total sales (calculated using a subquery) and multiply by 100 to get the percentage.
The results are grouped by the "Category," so you get the total sales and percentage contribution for each category.
This query will provide you with a result set containing the category, total sales, and percentage contribution for each category of business generated by The Briggs company.
**/


SELECT
    Category,
    ROUND(SUM(Sales), 0) AS TotalSales,
	--Divide TotaSale of each Category with the TotalSales of all categories. Find the percentage. Round up to 0dp. Convert reult to String and put the "%" as the unit by using the function " CONCAT"
    CONCAT(ROUND((SUM(Sales) / (SELECT SUM(Sales) FROM Orders)) * 100, 1), '%') AS 'PercentageContribution (%)'
FROM
    Orders
GROUP BY
    Category
ORDER BY 
	TotalSales DESC;


/**
QUESTION 8:
After seeing the Sales by Category, the Briggs company became curious 
and wanted to dig deeper to see which subcategory is selling the most. 
They need the help of an analyst. Please help the company 
to write a query to show the Sub_Category and the TotalSales of each Sub_Category. 
Let your query display only the Sub_Category and the TotalSales columns to see which product sells the most.
**/

SELECT Sub_Category, ROUND(SUM(Sales), 0) AS [Total Sales]  	
FROM Orders
GROUP BY Sub_Category
ORDER BY [Total Sales]  DESC;



/**
QUESTION 9:
Now that you have identified "phones" from column Sub_Category 
as the business driver in terms of revenue. The company wants to know the total "phones sales" by year 
to understand how "each year" performed. As the Analyst, 
please help them to show the breakdown of the Total sales by year in descending order. 
let your output show only Total sales and sales year column.

**/

SELECT
	ROUND(SUM(Sales),0) AS [Total Sales],
	YEAR(Order_Date) AS [Sales Year]
	
FROM Orders
WHERE Sub_Category = 'Phones'
GROUP BY YEAR(Order_Date)
ORDER BY [Total Sales] DESC;


/**
QUESTION 10:
The Director of Analytics has requested a detailed analysis of the Briggs Company. 
To fulfill this request, he needs you to generate a table that displays the profit margin of "each segment". 
The table should include the segments, total sales, total profit and the profit margin. 
To ensure accuracy, the profit margin should be arranged in descending order.
**/
SELECT
    Segment,
    ROUND(SUM(Sales), 0) AS TotalSales,
    ROUND(SUM(Profit), 0) AS TotalProfit,
    CONCAT(ROUND(((SUM(Profit) / SUM(Sales)) * 100 ), 0), '%')    AS 'ProfitMargin (%)'

FROM Orders

GROUP BY Segment
ORDER BY 'ProfitMargin (%)' DESC;


/**
DAY 24 (QUESTION 18)
Our client is planning their logistics for 2024, they want to know the average number of days
it takes to ship to the top 10 states. Using the sample superstore dataset, write a query to show
the state and the average number of days between the order date and the ship date to the top 10 states.
**/
SELECT TOP 10 State, 
		AVG(DATEDIFF(day, Order_Date, Ship_Date)) AS AverageDaysBetweenOrderAndShip
FROM Orders
GROUP BY State
ORDER BY AverageDaysBetweenOrderAndShip ASC






/**
DAY 25 (QUESTION 19):
Your company received a lot of bad reviews about some of your products lately and the management
wants to see which products they are and how many have been returned so far. Using the Orders and returns table,
write a query to see the top 5 most returned products from the company.
**/
SELECT TOP 5 Product_Name, Product_ID, 
		COUNT(Returned) AS Product_count
FROM Orders r
JOIN Returns re ON r.Order_ID = re.Order_ID
GROUP BY Product_Name, Product_ID
ORDER BY Product_count DESC



/**
DAY 27 BONUS QUESTION:
Write a query to find the 3rd highest sales from the sample superstore data.
**/

SELECT TOP 1 ROUND(Sales, 2) AS ThirdHighestSales
FROM  (
		SELECT TOP 3 Sales
		FROM Orders
		ORDER BY Sales DESC
) AS SubQuery
ORDER BY Sales ASC


--OR

WITH RankedOrders AS (
    SELECT
        Order_ID,
        Sales,
        DENSE_RANK() OVER (ORDER BY Sales DESC) AS SalesRank
    FROM
        Orders
)
SELECT
    Order_ID,
    Sales AS ThirdHighestSale
FROM
    RankedOrders
WHERE
    SalesRank = 3;


/**
This query first creates a common table expression (CTE) called RankedOrders, 
where it ranks the orders based on the Sales column in descending order using the DENSE_RANK() window function. 
The resulting rank is stored in the SalesRank column. Then, in the main query, 
it selects the Order_ID and Sales from the CTE where the SalesRank is equal to 3, 
which gives you the 3rd highest sales value from the Orders table.
**/

USE Superstore

